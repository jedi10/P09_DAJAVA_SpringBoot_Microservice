version : "3.8"
services :
  ui :
    image: ui
    build :
      context: ./
      dockerfile: ./dockerfile
    container_name: ui
    ports :
      - "8091:8091"
    networks:
      - default
    depends_on:
      patient:
        condition: service_started
      note:
        condition: service_started
      risk:
        condition: service_started

  risk:
    image: risk
    build:
      context: ../risk
      dockerfile: ../risk/dockerfile
    container_name: risk
    ports:
      - "8061:8061"
    depends_on:
      note:
        condition: service_started
      patient:
        condition: service_started

  note:
    image: note
    build:
      context: ../note
      dockerfile: ../note/dockerfile
    container_name: note
    ports:
      - "8071:8071"
    depends_on:
      - mongodb
        #condition: service_healthy

  patient:
    image : patient
    build :
      context: ../patient
      dockerfile: ../patient/dockerfile
    container_name: patient
    ports :
      - "8085:8085"
    depends_on:
      mariadb:
        condition: service_healthy

  mariadb:
    image: mariadb:10.5.5
    container_name: mariadb
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: passdb
      MYSQL_PASSWORD: pass
      MYSQL_USER: anna
      MYSQL_DATABASE: mediscreen
      TZ: "Europe/Paris"
    ports:
      - "3306:3306"
    healthcheck:
      #disable: true
      #test: ["NONE"]
      #test: docker inspect mariadb
      test: ["CMD-SHELL", 'mysql --database=mediscreen --password=passdb --execute="SELECT 1 + 1" --skip-column-names -B']
      #test: [CMD mysql --user=root --password=passdb -e \"show databases;\"]
      #test: [ 'CMD', 'mysqladmin', 'ping', '-u', 'root', 'passdb' ]
      #test: ["CMD", "curl", "-f", "--user=root", "--password=passdb", "http://mariadb:3306"]
      #test: "/usr/bin/mysql --user=root --password=passdb --execute \"SHOW DATABASES;\""
      interval: 35s
      timeout: 10s
      retries: 5

  mongodb:
    image: mongo:latest
    environment:
      MONGO_INITDB_DATABASE: note_db
      #MONGO_INITDB_ROOT_USERNAME: root
      #MONGO_INITDB_ROOT_PASSWORD: rootpassword
      #MONGODB_DATA_DIR: /data/db
      #MONDODB_LOG_DIR: /dev/null
    container_name: mongo
    ports:
      - 27017:27017
    #healthcheck:
      #test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
      #test: ["CMD-SHELL", "docker-healthcheck"]
      #interval: 10s
      #timeout: 10s
      #retries: 5
      #start_period: 40s

  mongo-express:
    image: mongo-express:latest
    restart: always
    ports:
      - 8081:8081
    #environment:
      #ME_CONFIG_MONGODB_ADMINUSERNAME: root
      #ME_CONFIG_MONGODB_ADMINPASSWORD: rootpassword
    depends_on:
      - mongodb


#MongoDB
  #with contol panel https://medium.com/@kristaps.strals/docker-mongodb-net-core-a-good-time-e21f1acb4b7b
  #https://yosh.ke.mu/mongo_in_docker
  #https://www.codeflow.site/fr/article/how-to-set-up-flask-with-mongodb-and-docker
  #https://github.com/sonyarianto/docker-compose-mongodb
#http://pierrepironin.github.io/docker-et-mongodb/


#MARIADB
#https://forums.docker.com/t/using-a-database-defined-in-external-compose-file/93869/2
#https://stefanscherer.github.io/run-linux-and-windows-containers-on-windows-10/
#https://howchoo.com/devops/how-to-add-a-health-check-to-your-docker-container
#healthcheck https://scoutapm.com/blog/how-to-use-docker-healthcheck
  #Interval - specifies the time between the health check for the application container. it waits for the specified time from one check to another.
  #Timeout - specifies the time that the health check waits for a response to consider the status of the container. For example, if we define 30 seconds and our server doesn’t respond within 30 seconds, then it’s considered as failed.
  #Start-period - specifies the number of seconds the container needs to start; health check will wait for that time to start.
  #Retries - specifies the number of consecutive health check failures required to declare the container status as unhealthy. Health check will only try up to the specified retry number. If the server fails consecutively up to the specified times, it is then considered unhealthy.
#https://marcopeg.com/2019/docker-compose-healthcheck
#https://warlord0blog.wordpress.com/2021/03/04/docker-compose-healthcheck/
#https://kuttler.eu/code/docker-compose-mariadb-mysql-healthcheck/
#https://kifarunix.com/install-and-run-mariadb-as-a-docker-container/
#https://hevodata.com/learn/mariadb-docker/
#docker search mariadb
#https://mariadb.com/kb/en/installing-and-using-mariadb-via-docker/
#docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mariadb
#https://learntubes.com/how-to-install-mariadb-using-docker-compose
#https://onexlab-io.medium.com/docker-compose-mariadb-5eb7a37426a2

#HealthCheck for postgres
# https://github.com/peter-evans/docker-compose-healthcheck